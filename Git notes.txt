
GIT
Git is a version control system-It is developed to co-ordinate the work among the developers.
Git helps you keep track of code changes.
Git is used to collaborate on code.

Features of GIT
1.Open Source – GPL license
2.Scalable- large number of users git can easily handle
3.Distributed- on another machine user can easily clone
4.Security-Secure, uses SHA1 (Secure Hash Function) to name and identify the objects
5.Speed-fast, most of the operation on local repo
6.Branching and Merging- great feature, multiple branches so that other developer work together.
7.Staging Area- preview of next commit.

		
		Working Directory			Staging Directory			Repository
			|					|				    |
			|					|				    |
			|		add			|				    |
			|-------------------------------------->|				    |
			|					|				    |
			|					|		commit		    |
			|					|---------------------------------->|
			|					|				    |
			|					|				    |
			|				     Checkout				    |
			|<--------------------------------------|-----------------------------------|



->he first thing we need to do, is to check if Git is properly installed: 	git --version


->Configure Git
Now let Git know who you are. This is important for version control systems, as each Git commit uses this information:  
				git config --global user.name "MdMustafa14" 
				git config --global user.email "mdrmustafa@gmail.com"


->user is successfully registerd: 	git config --list

->Creating Git Folder:		mkdir myproject(mkdir makes a new directory)
				cd myproject(cd changes the current working directory)

-->Important Terminology
1.Branch- repository diverges from main working directory.
2Checkout- checkout is used for the act of switching between different versions of a target entity
3.Clone: making copy from server.
4.Merge – combining branches
5.Origin- remote repository from a project was initially cloned
6.Pull- receive the data from Server (GITHUB)
7.Push- Upload local repository to sever.
8.Git Ignore-use for intentionally untrack the fine
Git Diff- shows changes between commit, working tree etc.
9.Git Rm- for removing files.
Etc.



-> cd project/    (move to current working directory)
->list the files in our current working directory:   ls

->Create a Local repository
  & git init

->Make Copy
  & git clone

->Adding file to staging area
  & git add file //single file
  & git add -A // all files

->Files in your Git repository folder can be in one of 2 states:

Tracked - files that Git knows about and are added to the repository
Untracked - files that are in your working directory, but not added to the repository

 When you first add files to an empty repository, they are all untracked. 
 To get Git to track them, you need to stage them, or add them to the staging environment.

->See the status of file
  & git status

->Commiting the change
  & git commit -m "commit"            Record the file Permanetly

->undo the staging file
  & git checkout file.ext

->Track the changes that have not been staged
  $ git diff
->Track the changes that have staged but not commited
  $ git diff --staged
->Track the changes after committing a file
  & git diff HEAD

->Show the objects
  & git show

->Commit History
Display the most recent commits and status of the head.
	$git log
	$git log -p -2
	Output as one commit per line

	$git log –-oneline
	Display the files that have been modified

	$git log –-stat

	Display the modification on each line of a file:
	$ git blame <file name>

	Ignoring Files
	Create. gitignore file



	Branching

	List a branch
	$git branch –-list

	Create Branch
	$git branch [name]

	Delete Branch
	$git branch -d [name]

	Renaming the branch
	$git branch -m [old name] [new name]

	Git checkout
	Switch between branch in a repository
	$git checkout [branch name]

	Create new branch and switch to it
	$git checkout -b [branch name]

->	Merging

	Merge the branches
	$git merge [branch name]

	Working on Remote
	$git remote -v

	Add remote to repository
	$git remote add [name] [remote url]

	Remove from
	Delete the file
	$git rm [file]

	Only remove file from staging area
	$git rm –-cached [file]




		GITHUB
		Repository Hosting Service
		Remote Repository:

		Git remote add name url
		Git remote -v
		Git push -u origin master


		Git remote set-url origin url
 



